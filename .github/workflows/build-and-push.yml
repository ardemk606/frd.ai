name: CI - Build and Push Docker Images

on:
  push:
    branches:
      - main
    paths:
      - "src/**"
      - "worker/**"
      - "frontend/**"
  workflow_dispatch:
    inputs:
      components:
        description: 'Which components to build (comma-separated: api,frontend,worker or "all")'
        required: true
        default: "all"
        type: string
      force_build:
        description: "Force build even if no changes detected"
        required: false
        default: false
        type: boolean

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Определяем наши приложения
        app:
          - name: api
            path: ./src
            dockerfile: ./src/Dockerfile
          - name: frontend
            path: ./frontend
            dockerfile: ./frontend/Dockerfile
          - name: worker
            path: ./worker
            dockerfile: ./worker/Dockerfile.uv
    outputs:
      api-built: ${{ steps.set-output.outputs.api-built }}
      frontend-built: ${{ steps.set-output.outputs.frontend-built }}
      worker-built: ${{ steps.set-output.outputs.worker-built }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Проверка для мануального запуска
      - name: Check if component should be built (manual trigger)
        if: github.event_name == 'workflow_dispatch'
        id: manual_check
        run: |
          COMPONENTS="${{ github.event.inputs.components }}"
          FORCE_BUILD="${{ github.event.inputs.force_build }}"

          if [[ "$COMPONENTS" == "all" ]] || [[ "$COMPONENTS" == *"${{ matrix.app.name }}"* ]]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi

          echo "force_build=$FORCE_BUILD" >> $GITHUB_OUTPUT

      # Проверка изменений для автоматического запуска
      - name: Check for changes in app directory (automatic trigger)
        if: github.event_name == 'push'
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            app:
              - '${{ matrix.app.path }}/**'

      # Определяем, нужно ли собирать
      - name: Determine if build should proceed
        id: build_decision
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_build=${{ steps.manual_check.outputs.should_build }}" >> $GITHUB_OUTPUT
          else
            echo "should_build=${{ steps.filter.outputs.app }}" >> $GITHUB_OUTPUT
          fi

      - name: Login to GitHub Container Registry
        if: steps.build_decision.outputs.should_build == 'true'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        if: steps.build_decision.outputs.should_build == 'true'
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ matrix.app.dockerfile }}
          push: true
          tags: ghcr.io/${{ github.repository }}/${{ matrix.app.name }}:${{ github.sha }}

      - name: Set outputs for next job
        id: set-output
        run: |
          if [[ "${{ steps.build_decision.outputs.should_build }}" == "true" && "${{ matrix.app.name }}" == "api" ]]; then
            echo "api-built=true" >> $GITHUB_OUTPUT
          fi
          if [[ "${{ steps.build_decision.outputs.should_build }}" == "true" && "${{ matrix.app.name }}" == "frontend" ]]; then
            echo "frontend-built=true" >> $GITHUB_OUTPUT
          fi
          if [[ "${{ steps.build_decision.outputs.should_build }}" == "true" && "${{ matrix.app.name }}" == "worker" ]]; then
            echo "worker-built=true" >> $GITHUB_OUTPUT
          fi

  update-charts:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: always() && (contains(needs.build-and-push.outputs.*, 'true'))
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq

      - name: Update Helm chart values
        run: |
          # Определяем какие компоненты были собраны
          UPDATED_COMPONENTS=""

          if [[ "${{ needs.build-and-push.outputs.api-built }}" == "true" ]]; then
            echo "Updating API chart..."
            yq -i '.image.tag = "${{ github.sha }}"' deployment/app-charts/api/values.yaml
            UPDATED_COMPONENTS="$UPDATED_COMPONENTS api"
          fi

          if [[ "${{ needs.build-and-push.outputs.frontend-built }}" == "true" ]]; then
            echo "Updating Frontend chart..."
            yq -i '.image.tag = "${{ github.sha }}"' deployment/app-charts/frontend/values.yaml
            UPDATED_COMPONENTS="$UPDATED_COMPONENTS frontend"
          fi

          if [[ "${{ needs.build-and-push.outputs.worker-built }}" == "true" ]]; then
            echo "Updating Worker chart..."
            yq -i '.image.tag = "${{ github.sha }}"' deployment/app-charts/worker/values.yaml
            UPDATED_COMPONENTS="$UPDATED_COMPONENTS worker"
          fi

          # Коммитим все изменения одним коммитом
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add deployment/app-charts/*/values.yaml
          git commit -m "ci: Update image tags for${UPDATED_COMPONENTS} to ${{ github.sha }}"
          git pull --rebase origin ${{ github.ref_name }}
          git push

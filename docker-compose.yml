services:
  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MinIO Client для создания бакетов
  minio-setup:
    image: minio/mc:latest
    container_name: minio-setup
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      until /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin; do echo 'Waiting for MinIO...' && sleep 2; done;
      /usr/bin/mc mb myminio/seed-dataset --ignore-existing;
      /usr/bin/mc mb myminio/generated-dataset --ignore-existing;
      /usr/bin/mc mb myminio/lora-adapters --ignore-existing;
      echo 'MinIO buckets created successfully';
      "

  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: datasets
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Application
  app:
    build:
      context: .
      dockerfile: src/Dockerfile
    container_name: data-generation-api
    ports:
      - "7777:7777"
    environment:
      # MinIO Settings
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_BUCKET: seed-dataset
      MINIO_SECURE: "false"
      
      # Database Settings
      DB_HOST: postgres
      DB_PORT: "5432"
      DB_NAME: datasets
      DB_USER: postgres
      DB_PASSWORD: password
      
      # Redis Settings
      REDIS_HOST: redis
      REDIS_PORT: "6379"
      
      # AI Settings
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      BATCH_SIZE: "5"
      TOTAL_RESULTS: "100"
      MAX_WORKERS: "10"
      EXAMPLES_PER_API_CALL: "5"
      
      # GigaChat Settings
      GIGACHAT_ACCESS_TOKEN: ${GIGACHAT_ACCESS_TOKEN}
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio-setup:
        condition: service_completed_successfully
    volumes:
      - ./data:/app/data
      - ./mock:/app/mock

  # Celery CPU Worker
  cpu-worker:
    build:
      context: .
      dockerfile: ./worker/Dockerfile.uv
      # Кеширование для быстрой пересборки
      cache_from:
        - python:3.11-slim
    container_name: data-generation-cpu-worker
    environment:
      # MinIO Settings
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_BUCKET: seed-dataset
      MINIO_SECURE: "false"
      
      # Database Settings
      DB_HOST: postgres
      DB_PORT: "5432"
      DB_NAME: datasets
      DB_USER: postgres
      DB_PASSWORD: password
      
      # Redis Settings
      REDIS_HOST: redis
      REDIS_PORT: "6379"
      REDIS_DB: "0"
      
      # AI Settings
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      
      # GigaChat Settings
      GIGACHAT_ACCESS_TOKEN: ${GIGACHAT_ACCESS_TOKEN}
      
      # LoRA Settings
      LORA_MODEL_NAME: "Qwen/Qwen3-0.6B"
      LORA_MAX_LENGTH: "512"
      LORA_NUM_EPOCHS: "3"
      LORA_BATCH_SIZE: "4"
      LORA_GRAD_ACCUM_STEPS: "2"
      LORA_LOGGING_STEPS: "10"
      LORA_SAVE_STEPS: "500"
      LORA_EVAL_STEPS: "500"
      LORA_WARMUP_STEPS: "100"
      LORA_N_TRIALS: "20"
      
      # Worker Settings
      WORKER_QUEUES: "celery,cpu_queue"
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio-setup:
        condition: service_completed_successfully
    volumes:
      - ./worker:/app
      - ./shared:/app/shared
      - ./data:/app/data

  # Celery GPU Worker
  gpu-worker:
    build:
      context: .
      dockerfile: ./worker/Dockerfile.uv
      cache_from:
        - python:3.11-slim
    container_name: data-generation-gpu-worker
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    environment:
      # MinIO Settings
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_BUCKET: seed-dataset
      MINIO_SECURE: "false"
      
      # Database Settings
      DB_HOST: postgres
      DB_PORT: "5432"
      DB_NAME: datasets
      DB_USER: postgres
      DB_PASSWORD: password
      
      # Redis Settings
      REDIS_HOST: redis
      REDIS_PORT: "6379"
      REDIS_DB: "0"
      
      # AI Settings
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      
      # GigaChat Settings
      GIGACHAT_ACCESS_TOKEN: ${GIGACHAT_ACCESS_TOKEN}
      
      # LoRA Settings
      LORA_MODEL_NAME: "Qwen/Qwen3-0.6B"
      LORA_MAX_LENGTH: "512"
      LORA_NUM_EPOCHS: "3"
      LORA_BATCH_SIZE: "4"
      LORA_GRAD_ACCUM_STEPS: "2"
      LORA_LOGGING_STEPS: "10"
      LORA_SAVE_STEPS: "500"
      LORA_EVAL_STEPS: "500"
      LORA_WARMUP_STEPS: "100"
      LORA_N_TRIALS: "20"
      
      # Worker Settings
      WORKER_QUEUES: "gpu_queue"
      
      # CUDA Settings
      CUDA_VISIBLE_DEVICES: "0"
      TORCH_CUDA_ARCH_LIST: "7.5;8.0;8.6;8.9;9.0"
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio-setup:
        condition: service_completed_successfully
    volumes:
      - ./worker:/app
      - ./shared:/app/shared
      - ./data:/app/data

  # Streamlit Frontend
  frontend:
    build:
      context: .
      dockerfile: ./frontend/Dockerfile
    container_name: streamlit-frontend
    ports:
      - "8501:8501"
    depends_on:
      - app
    environment:
      - API_BASE_URL=http://app:7777

  # Inference Worker для плейграунда
  inference-worker:
    build:
      context: ./inference-worker
      dockerfile: Dockerfile
    container_name: inference-worker
    ports:
      - "8765:8765"
    environment:
      # Модель по умолчанию
      INFERENCE_MODEL_NAME: "Qwen/Qwen3-0.6B"
      INFERENCE_HOST: "0.0.0.0"
      INFERENCE_PORT: "8765"
      # Кеш для моделей
      TRANSFORMERS_CACHE: "/app/cache"
      HF_HOME: "/app/cache"
      
      # CUDA Settings
      CUDA_VISIBLE_DEVICES: "0"
      TORCH_CUDA_ARCH_LIST: "7.5;8.0;8.6;8.9;9.0"
    volumes:
      # Подключаем адаптеры из MinIO (если будут скачиваться локально)
      - ./adapters:/app/adapters
      # Кеш для моделей HuggingFace
      - inference_cache:/app/cache
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

volumes:
  minio_data:
  postgres_data:
  redis_data:
  inference_cache: 
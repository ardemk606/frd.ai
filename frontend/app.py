"""
FRD.ai - From Raw Data to AI
Streamlit –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
"""

import streamlit as st
import requests
import os
import pandas as pd

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="FRD.ai - From Raw Data to AI",
    page_icon="‚ö°",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
if "current_page" not in st.session_state:
    st.session_state.current_page = "–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã"
if "selected_project_id" not in st.session_state:
    st.session_state.selected_project_id = None
if "show_generation_modal" not in st.session_state:
    st.session_state.show_generation_modal = False

# API –∫–ª–∏–µ–Ω—Ç
def upload_dataset(uploaded_file, system_prompt):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞—Ç–∞—Å–µ—Ç –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ API"""
    try:
        base_url = os.getenv("API_BASE_URL", "http://localhost:7777")
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –æ–¥–∏–Ω —Ä–∞–∑ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        file_content = uploaded_file.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
        if not file_content:
            st.error("–§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ")
            return None
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è requests
        files = {
            "file": (
                uploaded_file.name,
                file_content,
                uploaded_file.type or "application/octet-stream"
            )
        }
        
        # –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
        data = {
            "system_prompt": system_prompt
        }
        

        
        response = requests.post(f"{base_url}/upload/dataset", files=files, data=data)
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
        if hasattr(e, 'response') and e.response is not None:
            st.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {e.response.text}")
        return None


def get_projects():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    return _make_api_request(
        "/projects/short_info",
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤",
        method="GET"
    )


def get_project_detail(project_id):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ"""
    return _make_api_request(
        f"/projects/{project_id}/detail",
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ",
        method="GET"
    )


def next_step_project(project_id):
    """–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –ø—Ä–æ–µ–∫—Ç–∞ (–ø—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ—Ö–æ–¥)"""
    return _make_api_request(
        f"/projects/{project_id}/next_step",
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É"
    )


def start_generation(project_id, examples_count, is_structured, output_format, json_schema, model_id=None):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö"""
    try:
        base_url = os.getenv("API_BASE_URL", "http://localhost:7777")
        
        payload = {
            "project_id": project_id,
            "generation_params": {
                "examples_count": examples_count,
                "is_structured": is_structured,
                "output_format": output_format,
                "json_schema": json_schema if json_schema else None,
                "model_id": model_id
            }
        }
        
        response = requests.post(f"{base_url}/projects/{project_id}/start_generation", json=payload)
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        if hasattr(e, 'response') and e.response is not None:
            st.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {e.response.text}")
        return None


def start_validation(project_id):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞—Ç–∞—Å–µ—Ç–∞"""
    return _make_api_request(
        f"/dataset/{project_id}/validate",
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"
    )


def _make_api_request(endpoint_path, error_message_prefix, method="POST", **kwargs):
    """–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API"""
    try:
        base_url = os.getenv("API_BASE_URL", "http://localhost:7777")
        
        if method.upper() == "GET":
            response = requests.get(f"{base_url}{endpoint_path}", **kwargs)
        elif method.upper() == "POST":
            response = requests.post(f"{base_url}{endpoint_path}", **kwargs)
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π HTTP –º–µ—Ç–æ–¥: {method}")
            
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        st.error(f"{error_message_prefix}: {e}")
        if hasattr(e, 'response') and e.response is not None:
            st.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {e.response.text}")
        return None


def skip_generation(project_id):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏ –ø–µ—Ä–µ–π—Ç–∏ —Å—Ä–∞–∑—É –∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    return _make_api_request(
        f"/projects/{project_id}/skip_generation",
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
    )


def skip_validation(project_id):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏ –ø–µ—Ä–µ–π—Ç–∏ —Å—Ä–∞–∑—É –∫ fine-tuning"""
    return _make_api_request(
        f"/projects/{project_id}/skip_validation", 
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"
    )


def start_fine_tuning(project_id):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å LoRA fine-tuning"""
    return _make_api_request(
        f"/projects/{project_id}/start_fine_tuning",
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ fine-tuning"
    )


def get_available_models():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π LLM"""
    return _make_api_request(
        "/models/available",
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π",
        method="GET"
    )


def get_default_model():
    """–ü–æ–ª—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    return _make_api_request(
        "/models/default",
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
        method="GET"
    )


def get_available_lora_adapters():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö LoRA-–∞–¥–∞–ø—Ç–µ—Ä–æ–≤"""
    return _make_api_request(
        "/playground/adapters",
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ LoRA-–∞–¥–∞–ø—Ç–µ—Ä–æ–≤",
        method="GET"
    )


def get_playground_models():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø–ª–µ–π–≥—Ä–∞—É–Ω–¥–∞"""
    return _make_api_request(
        "/playground/models",
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π",
        method="GET"
    )


def stream_inference(messages, adapter_id=None, system_prompt=None, max_tokens=512, temperature=0.7, top_k=50, top_p=0.9):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π inference"""
    try:
        import requests
        import json
        
        base_url = os.getenv("API_BASE_URL", "http://localhost:7777")
        
        payload = {
            "messages": [{"role": msg["role"], "content": msg["content"]} for msg in messages],
            "adapter_id": adapter_id,
            "system_prompt": system_prompt,
            "max_tokens": max_tokens,
            "temperature": temperature,
            "top_k": top_k,
            "top_p": top_p
        }
        
        response = requests.post(
            f"{base_url}/playground/inference/stream", 
            json=payload,
            stream=True,
            headers={'Accept': 'text/plain'},
            timeout=60
        )
        response.raise_for_status()
        
        # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
        for line in response.iter_lines():
            if line:
                line_str = line.decode('utf-8')
                if line_str.startswith('data: '):
                    try:
                        data = json.loads(line_str[6:])  # –£–±–∏—Ä–∞–µ–º "data: "
                        yield data
                    except json.JSONDecodeError:
                        continue
                        
    except Exception as e:
        yield {"type": "error", "content": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç—Ä–∏–º–∏–Ω–≥–µ: {str(e)}"}


def show_status_pipeline(current_status):
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø–∞–π–ø–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–æ–≤"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–π–ø–ª–∞–π–Ω
    pipeline = [
        "NEW",
        "GENERATING_DATASET", 
        "READY_FOR_VALIDATION",
        "VALIDATING",
        "READY_FOR_FINE_TUNING",
        "FINE_TUNING",
        "READY_FOR_DEPLOY",
        "DEPLOYED"
    ]
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
    try:
        current_index = pipeline.index(current_status)
    except ValueError:
        current_index = 0
    
    # –°–æ–∑–¥–∞—ë–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    st.subheader("üîÑ –ü–∞–π–ø–ª–∞–π–Ω –ø—Ä–æ–µ–∫—Ç–∞")
    
    cols = st.columns(len(pipeline))
    
    for i, status in enumerate(pipeline):
        with cols[i]:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∏ —Å–∏–º–≤–æ–ª
            if i < current_index:
                # –£–∂–µ –ø—Ä–æ–π–¥–µ–Ω–æ
                st.markdown(f"‚úÖ **{status}**")
            elif i == current_index:
                # –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
                st.markdown(f"üîÑ **{status}**")
                st.markdown("**‚Üê –°–µ–π—á–∞—Å –∑–¥–µ—Å—å**")
            else:
                # –ï—â—ë –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ
                st.markdown(f"‚è∏Ô∏è {status}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –¥–∞–ª—å—à–µ
    if current_index < len(pipeline) - 1:
        next_status = pipeline[current_index + 1]
        st.info(f"**–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:** {next_status}")
    else:
        st.success("**–ü—Ä–æ–µ–∫—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!** üéâ")


def show_generation_modal(project_id, project_name):
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    
    with st.container():
        st.subheader("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        st.write(f"**–ü—Ä–æ–µ–∫—Ç:** {project_name}")
        
        # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ - –≤—ã–Ω–æ—Å–∏–º –ó–ê –ø—Ä–µ–¥–µ–ª—ã —Ñ–æ—Ä–º—ã –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        st.subheader("ü§ñ –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
        models_data = get_available_models()
        selected_model_id = None
        
        if models_data and models_data.get("success") and models_data.get("models"):
            models = models_data["models"]
            
            # –ù–∞—Ö–æ–¥–∏–º –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            default_model_index = 0
            for i, model in enumerate(models):
                if model.get("is_default", False):
                    default_model_index = i
                    break
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø—Ü–∏–π –¥–ª—è selectbox
            model_options = []
            for model in models:
                display_text = f"{model['display_name']} ({model['model_id']})"
                if model.get("is_default", False):
                    display_text += " [–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é]"
                model_options.append(display_text)
            
            selected_option = st.selectbox(
                "–ú–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
                options=model_options,
                index=default_model_index,
                help="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å LLM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
                key="model_selection"
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º model_id –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–∏
            selected_index = model_options.index(selected_option)
            selected_model_id = models[selected_index]["model_id"]
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
            selected_model = models[selected_index]
            if selected_model.get("description"):
                st.info(f"üìù {selected_model['description']}")
        else:
            st.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        
        st.divider()
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç - –≤—ã–Ω–æ—Å–∏–º –ó–ê –ø—Ä–µ–¥–µ–ª—ã —Ñ–æ—Ä–º—ã –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        is_structured = st.checkbox(
            "–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç",
            value=False,
            help="–î–æ–ª–∂–µ–Ω –ª–∏ –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –±—ã—Ç—å –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ?",
            key="is_structured_checkbox"
        )
        
        # –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ - —Ç–∞–∫–∂–µ –≤—ã–Ω–æ—Å–∏–º –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if is_structured:
            output_format = st.selectbox(
                "–§–æ—Ä–º–∞—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞",
                options=["json"],
                index=0,
                help="–ü–æ–∫–∞ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ JSON —Ñ–æ—Ä–º–∞—Ç",
                key="output_format_select"
            )
        else:
            st.info("–î–ª—è –Ω–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Ñ–æ—Ä–º–∞—Ç –±—É–¥–µ—Ç: text")
            output_format = "text"
        
        # JSON Schema - –≤—ã–Ω–æ—Å–∏–º –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        json_schema = None
        if is_structured:
            json_schema = st.text_area(
                "JSON Schema –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞",
                placeholder='{\n  "type": "object",\n  "properties": {\n    "answer": {"type": "string"}\n  },\n  "required": ["answer"]\n}',
                height=150,
                help="JSON Schema –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏",
                key="json_schema_input"
            )
        else:
            st.info("JSON Schema –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –Ω–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞")
        
        with st.form("generation_form"):
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤
            examples_count = st.number_input(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
                min_value=1,
                max_value=1000,
                value=10,
                help="–û—Ç 1 –¥–æ 1000 –ø—Ä–∏–º–µ—Ä–æ–≤"
            )
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è JSON Schema
            if is_structured and json_schema and json_schema.strip():
                try:
                    import json
                    json.loads(json_schema)
                    st.success("‚úÖ JSON Schema –≤–∞–ª–∏–¥–Ω–∞")
                except json.JSONDecodeError as e:
                    st.error(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è JSON Schema: {e}")
            
            # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            col1, col2 = st.columns([1, 1])
            
            with col1:
                submitted = st.form_submit_button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", use_container_width=True, type="primary")
            
            with col2:
                cancelled = st.form_submit_button("‚ùå –û—Ç–º–µ–Ω–∞", use_container_width=True)
            
            if submitted:
                # –í–∞–ª–∏–¥–∞—Ü–∏—è
                if is_structured and (not json_schema or not json_schema.strip()):
                    st.error("–î–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å JSON Schema")
                    return None
                elif is_structured and json_schema and json_schema.strip():
                    try:
                        json.loads(json_schema)
                    except json.JSONDecodeError:
                        st.error("JSON Schema —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏")
                        return None
                
                # –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                with st.spinner("–ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é..."):
                    result = start_generation(
                        project_id,
                        examples_count,
                        is_structured,
                        output_format,
                        json_schema,
                        model_id=selected_model_id
                    )
                    
                    if result and result.get("success"):
                        st.success(f"‚úÖ {result.get('message')}")
                        st.info(f"üÜî ID –∑–∞–¥–∞—á–∏: {result.get('task_id')}")
                        st.info(f"üìã –û—á–µ—Ä–µ–¥—å: {result.get('queue_name')}")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
                        if result.get('model_id'):
                            st.info(f"ü§ñ –ú–æ–¥–µ–ª—å: {result.get('model_id')}")
                        elif selected_model_id:
                            st.info(f"ü§ñ –ú–æ–¥–µ–ª—å: {selected_model_id}")
                        else:
                            st.info("ü§ñ –ú–æ–¥–µ–ª—å: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                        
                        return "success"
                    else:
                        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é")
                        return None
            
            if cancelled:
                return "cancelled"
    
    return None


# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("‚ö° FRD.ai - From Raw Data to AI")

# –°–∞–π–¥–±–∞—Ä –Ω–∞–≤–∏–≥–∞—Ü–∏—è
with st.sidebar:
    st.header("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if st.button("–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã", key="nav_all", use_container_width=True, 
                 type="primary" if st.session_state.current_page == "–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã" else "secondary"):
        st.session_state.current_page = "–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã"
        st.rerun()
    
    if st.button("–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", key="nav_create", use_container_width=True,
                 type="primary" if st.session_state.current_page == "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç" else "secondary"):
        st.session_state.current_page = "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç"
        st.rerun()
    
    if st.button("üéÆ –ü–ª–µ–π–≥—Ä–∞—É–Ω–¥", key="nav_playground", use_container_width=True,
                 type="primary" if st.session_state.current_page == "–ü–ª–µ–π–≥—Ä–∞—É–Ω–¥" else "secondary"):
        st.session_state.current_page = "–ü–ª–µ–π–≥—Ä–∞—É–Ω–¥"
        st.rerun()
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if st.session_state.current_page == "–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞":
        st.divider()
        if st.button("‚Üê –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç–∞–º", key="nav_back", use_container_width=True):
            st.session_state.current_page = "–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã"
            st.session_state.selected_project_id = None
            st.session_state.show_generation_modal = False
            st.rerun()

# –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü
if st.session_state.current_page == "–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã":
    st.header("–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã")
    
    # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", key="refresh_projects"):
        st.rerun()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã
    with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã..."):
        projects_data = get_projects()
    
    if projects_data and projects_data.get("success") and projects_data.get("projects"):
        projects = projects_data["projects"]
        
        st.info(f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(projects)}")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
        for project in projects:
            with st.container():
                col1, col2, col3, col4 = st.columns([3, 2, 2, 1.5])
                
                with col1:
                    st.subheader(f"üìÅ {project['name']}")
                    st.caption(f"ID: {project['id']}")
                
                with col2:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                    created_at = project['created_at']
                    if isinstance(created_at, str):
                        # –£–±–∏—Ä–∞–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –∏ Z –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        created_at = created_at.replace('T', ' ').split('.')[0]
                    st.write(f"**–°–æ–∑–¥–∞–Ω:**")
                    st.write(f"{created_at}")
                
                with col3:
                    # –¶–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞
                    status = project['status']
                    if status == 'NEW':
                        st.write(f"üü¢ {status}")
                    elif status == 'PROCESSING':
                        st.write(f"üü° {status}")
                    elif status == 'COMPLETED':
                        st.write(f"üîµ {status}")
                    else:
                        st.write(f"üî¥ {status}")
                
                with col4:
                    if st.button(
                        "üìÇ –û—Ç–∫—Ä—ã—Ç—å", 
                        key=f"open_{project['id']}", 
                        help="–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç",
                        use_container_width=True,
                        type="primary"
                    ):
                        st.session_state.selected_project_id = project['id']
                        st.session_state.current_page = "–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞"
                        st.rerun()
                
                st.divider()
    else:
        st.info("–ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤")
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            if st.button("+ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", key="create_from_main", use_container_width=True):
                st.session_state.current_page = "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç"
                st.rerun()

elif st.session_state.current_page == "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç":
    st.header("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    if "upload_success" not in st.session_state:
        st.session_state.upload_success = False
        st.session_state.upload_result = None
    
    # –§–æ—Ä–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    with st.form("upload_form", clear_on_submit=True):
        st.subheader("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞")
        
        uploaded_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–∞—Ç–∞—Å–µ—Ç–∞",
            type=["jsonl", "json", "txt", "csv"],
            help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JSONL, JSON, TXT, CSV"
        )
        
        st.subheader("–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç")
        
        system_prompt = st.text_area(
            "–í–≤–µ–¥–∏—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∏—Ö –≤–æ–ø—Ä–æ—Å–∞–º–∏...",
            height=150,
            help="–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∏ —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤ –º–æ–¥–µ–ª–∏"
        )
        
        submitted = st.form_submit_button("–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", use_container_width=True)
        
        if submitted:
            if uploaded_file is None:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–∞—Ç–∞—Å–µ—Ç–∞")
            elif not system_prompt.strip():
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç")
            else:
                with st.spinner("–°–æ–∑–¥–∞—ë–º –ø—Ä–æ–µ–∫—Ç..."):
                    result = upload_dataset(uploaded_file, system_prompt.strip())
                    
                    if result and result.get("success"):
                        st.session_state.upload_success = True
                        st.session_state.upload_result = result
                        st.rerun()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–Ω–µ —Ñ–æ—Ä–º—ã
    if st.session_state.upload_success and st.session_state.upload_result:
        st.success(f"–£—Å–ø–µ—à–Ω–æ: {st.session_state.upload_result.get('message')}")
        
        result_data = {
            "ID –ø—Ä–æ–µ–∫—Ç–∞": st.session_state.upload_result.get('dataset_id'),
            "–î–∞—Ç–∞—Å–µ—Ç –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ": st.session_state.upload_result.get('object_name')
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–Ω–æ–º –ø—Ä–æ–º–ø—Ç–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if st.session_state.upload_result.get('system_prompt_object_name'):
            result_data["–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"] = st.session_state.upload_result.get('system_prompt_object_name')
        
        st.json(result_data)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø—Ä–æ–µ–∫—Ç–∞–º (–≤–Ω–µ —Ñ–æ—Ä–º—ã)
        if st.button("–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–æ–µ–∫—Ç–∞–º", key="goto_projects"):
            st.session_state.current_page = "–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã"
            st.session_state.upload_success = False
            st.session_state.upload_result = None
            st.rerun()

elif st.session_state.current_page == "–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞":
    if st.session_state.selected_project_id is None:
        st.error("–ü—Ä–æ–µ–∫—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω")
        st.session_state.current_page = "–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã"
        st.rerun()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ..."):
        project_detail = get_project_detail(st.session_state.selected_project_id)
    
    if project_detail and project_detail.get("success"):
        project = project_detail["project"]
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        st.header(f"üìÅ {project['name']}")
        st.caption(f"ID: {project['id']} | –°–æ–∑–¥–∞–Ω: {project['created_at']}")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω
        show_status_pipeline(project['status'])
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        st.divider()
        st.subheader("üìú –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç")
        if project['system_prompt']:
            with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç", expanded=False):
                st.text_area(
                    "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:", 
                    value=project['system_prompt'], 
                    height=200,
                    disabled=True,
                    label_visibility="collapsed"
                )
        else:
            st.info("–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
        
        # –ü—Ä–µ–≤—å—é –¥–∞—Ç–∞—Å–µ—Ç–∞
        st.divider()
        st.subheader("üìä –ü—Ä–µ–≤—å—é –¥–∞—Ç–∞—Å–µ—Ç–∞ (–ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫)")
        
        if project['dataset_preview']:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∞
            if len(project['dataset_preview']) == 1 and 'error' in project['dataset_preview'][0]:
                st.error(project['dataset_preview'][0]['error'])
            else:
                # –°–æ–∑–¥–∞—ë–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                try:
                    df = pd.DataFrame(project['dataset_preview'])
                    st.dataframe(df, use_container_width=True)
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ JSON –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è
                    with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–∫ JSON"):
                        for i, item in enumerate(project['dataset_preview'], 1):
                            st.json(item)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–≤—å—é")
        
        # –î–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–æ–µ–∫—Ç–æ–º
        st.divider()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –ª–∏ —Å—Ç–∞—Ç—É—Å–µ
        if project['status'] != 'DEPLOYED':
            # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å NEW - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞
            if project['status'] == 'NEW':
                col1, col2 = st.columns(2)
                
                with col1:
                    if st.button("üöÄ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", key="setup_generation", use_container_width=True, type="primary"):
                        st.session_state.show_generation_modal = True
                        st.rerun()
                
                with col2:
                    if st.button("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", key="skip_generation", use_container_width=True):
                        with st.spinner("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏..."):
                            result = skip_generation(st.session_state.selected_project_id)
                            
                            if result and result.get("success"):
                                st.success(f"‚úÖ {result.get('message')}")
                                if result.get('seed_records_count'):
                                    st.info(f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {result.get('seed_records_count')} –∑–∞–ø–∏—Å–µ–π –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞")
                                st.rerun()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
                            else:
                                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é")
            
            # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å GENERATING_DATASET - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            elif project['status'] == 'GENERATING_DATASET':
                st.info("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...")
                st.caption("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è –≤ —Ñ–æ–Ω–µ. –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏.")
                
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
                if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", key="refresh_status", use_container_width=True):
                    st.rerun()
            
            # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å READY_FOR_VALIDATION - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            elif project['status'] == 'READY_FOR_VALIDATION':
                col1, col2 = st.columns(2)
                
                with col1:
                    if st.button("üîç –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é", key="start_validation", use_container_width=True, type="primary"):
                        with st.spinner("–ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞—Ç–∞—Å–µ—Ç–∞..."):
                            result = start_validation(st.session_state.selected_project_id)
                            
                            if result and result.get("success"):
                                st.success(f"‚úÖ {result.get('message')}")
                                st.info(f"üÜî ID –∑–∞–¥–∞—á–∏: {result.get('task_id')}")
                                st.rerun()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
                            else:
                                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é")
                
                with col2:
                    if st.button("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é", key="skip_validation_btn", use_container_width=True):
                        with st.spinner("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ fine-tuning..."):
                            result = skip_validation(st.session_state.selected_project_id)
                            
                            if result and result.get("success"):
                                st.success(f"‚úÖ {result.get('message')}")
                                st.rerun()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
                            else:
                                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é")
            
            # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å READY_FOR_FINE_TUNING - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É fine-tuning
            elif project['status'] == 'READY_FOR_FINE_TUNING':
                if st.button("üî• –ó–∞–ø—É—Å—Ç–∏—Ç—å LoRA Fine-tuning", key="start_fine_tuning", use_container_width=True, type="primary"):
                    with st.spinner("–ó–∞–ø—É—Å–∫–∞–µ–º LoRA –¥–æ–æ–±—É—á–µ–Ω–∏–µ..."):
                        result = start_fine_tuning(st.session_state.selected_project_id)
                        
                        if result and result.get("success"):
                            st.success(f"‚úÖ {result.get('message')}")
                            st.info(f"üÜî ID –∑–∞–¥–∞—á–∏: {result.get('task_id')}")
                            st.info(f"üìã –û—á–µ—Ä–µ–¥—å: {result.get('queue_name')}")
                            st.rerun()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
                        else:
                            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å fine-tuning")
            
            else:
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ - –ø—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ—Ö–æ–¥
                if st.button("‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥", key="next_step", use_container_width=True, type="primary"):
                    with st.spinner("–ü–µ—Ä–µ–≤–æ–¥–∏–º –ø—Ä–æ–µ–∫—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É..."):
                        result = next_step_project(st.session_state.selected_project_id)
                        
                        if result and result.get("success"):
                            st.success(f"‚úÖ {result.get('message')}")
                            st.rerun()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
                        else:
                            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É")
        else:
            st.success("üéâ –ü—Ä–æ–µ–∫—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")
        
        # –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if st.session_state.show_generation_modal:
            st.divider()
            modal_result = show_generation_modal(project['id'], project['name'])
            
            if modal_result == "success":
                st.session_state.show_generation_modal = False
                st.rerun()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
            elif modal_result == "cancelled":
                st.session_state.show_generation_modal = False
                st.rerun()
    
    else:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ")

elif st.session_state.current_page == "–ü–ª–µ–π–≥—Ä–∞—É–Ω–¥":
    st.header("üéÆ –ü–ª–µ–π–≥—Ä–∞—É–Ω–¥ LoRA-–∞–¥–∞–ø—Ç–µ—Ä–æ–≤")
    st.caption("–¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–≤–æ–∏ –æ–±—É—á–µ–Ω–Ω—ã–µ LoRA-–∞–¥–∞–ø—Ç–µ—Ä—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–ª–µ–π–≥—Ä–∞—É–Ω–¥–∞
    if "playground_messages" not in st.session_state:
        st.session_state.playground_messages = []
    if "playground_current_adapter" not in st.session_state:
        st.session_state.playground_current_adapter = None
    
    # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –í—ã–±–æ—Ä LoRA-–∞–¥–∞–ø—Ç–µ—Ä–∞
        st.write("**LoRA-–∞–¥–∞–ø—Ç–µ—Ä:**")
        adapters_data = get_available_lora_adapters()
        
        if adapters_data and adapters_data.get("success") and adapters_data.get("adapters"):
            adapters = adapters_data["adapters"]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–ë–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä–∞" (–±–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å)
            adapter_options = ["–ë–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä–∞ (–±–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å)"]
            adapter_options.extend([f"{adapter['name']} (ID: {adapter['id']})" for adapter in adapters])
            
            selected_adapter_option = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–∞–ø—Ç–µ—Ä:",
                options=adapter_options,
                key="adapter_select"
            )
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä
            if selected_adapter_option == "–ë–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä–∞ (–±–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å)":
                selected_adapter = None
            else:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ —Å—Ç—Ä–æ–∫–∏
                adapter_id = int(selected_adapter_option.split("ID: ")[1].split(")")[0])
                selected_adapter = next((a for a in adapters if a["id"] == adapter_id), None)
        else:
            st.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö LoRA-–∞–¥–∞–ø—Ç–µ—Ä–æ–≤")
            selected_adapter = None
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        st.write("**–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:**")
        system_prompt = st.text_area(
            "–í–≤–µ–¥–∏—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:",
            value="–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
            height=100,
            key="playground_system_prompt"
        )
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        st.write("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:**")
        
        max_tokens = st.slider(
            "Max tokens:",
            min_value=50,
            max_value=2048,
            value=512,
            step=50,
            key="playground_max_tokens"
        )
        
        temperature = st.slider(
            "Temperature:",
            min_value=0.1,
            max_value=2.0,
            value=0.7,
            step=0.1,
            key="playground_temperature"
        )
        
        top_k = st.slider(
            "Top K:",
            min_value=1,
            max_value=100,
            value=50,
            step=1,
            key="playground_top_k"
        )
        
        top_p = st.slider(
            "Top P:",
            min_value=0.1,
            max_value=1.0,
            value=0.9,
            step=0.05,
            key="playground_top_p"
        )
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", use_container_width=True):
            st.session_state.playground_messages = []
            st.rerun()
    
    with col2:
        st.subheader("üí¨ –ß–∞—Ç")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∞–¥–∞–ø—Ç–µ—Ä–µ
        if selected_adapter:
            st.info(f"ü§ñ –ê–∫—Ç–∏–≤–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä: {selected_adapter['name']} (–î–∞—Ç–∞—Å–µ—Ç: {selected_adapter['dataset_name']})")
        else:
            st.info("ü§ñ –ê–∫—Ç–∏–≤–Ω–∞ –±–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å (–±–µ–∑ LoRA-–∞–¥–∞–ø—Ç–µ—Ä–∞)")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        message_container = st.container()
        
        with message_container:
            for i, message in enumerate(st.session_state.playground_messages):
                if message["role"] == "user":
                    with st.chat_message("user"):
                        st.write(message["content"])
                else:
                    with st.chat_message("assistant"):
                        st.write(message["content"])
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        with st.container():
            user_input = st.chat_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å...")
            
            if user_input:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                st.session_state.playground_messages.append({
                    "role": "user",
                    "content": user_input
                })
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–∞–∑—É
                with st.chat_message("user"):
                    st.write(user_input)
                
                # –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞
                with st.chat_message("assistant"):
                    response_placeholder = st.empty()
                    
                    # –†–µ–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π inference
                    try:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –∞–¥–∞–ø—Ç–µ—Ä–∞
                        adapter_id = selected_adapter["id"] if selected_adapter else None
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥
                        streamed_text = ""
                        for data in stream_inference(
                            messages=st.session_state.playground_messages + [{"role": "user", "content": user_input}],
                            adapter_id=adapter_id,
                            system_prompt=system_prompt,
                            max_tokens=max_tokens,
                            temperature=temperature,
                            top_k=top_k,
                            top_p=top_p
                        ):
                            if data.get("type") == "token":
                                streamed_text += data.get("content", "")
                                response_placeholder.write(streamed_text)
                            elif data.get("type") == "error":
                                st.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {data.get('content')}")
                                streamed_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."
                                break
                            elif data.get("type") == "done":
                                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ done —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                                final_text = data.get("content", streamed_text)
                                if final_text and final_text != streamed_text:
                                    streamed_text = final_text
                                    response_placeholder.write(streamed_text)
                                break
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
                        st.session_state.playground_messages.append({
                            "role": "assistant", 
                            "content": streamed_text
                        })
                        
                    except Exception as e:
                        error_message = f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ inference worker: {str(e)}"
                        st.error(error_message)
                        response_placeholder.write(error_message)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é
                        st.session_state.playground_messages.append({
                            "role": "assistant", 
                            "content": error_message
                        })
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ
        if selected_adapter:
            st.success(f"‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å LoRA-–∞–¥–∞–ø—Ç–µ—Ä–æ–º: {selected_adapter['name']}")
        else:
            st.success("‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª—å—é")

# –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –ø–æ–∑–∂–µ)
st.sidebar.write("---")
st.sidebar.write("–û—Ç–ª–∞–¥–∫–∞:")
st.sidebar.write(f"–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {st.session_state.current_page}")
if st.session_state.selected_project_id:
    st.sidebar.write(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç: {st.session_state.selected_project_id}") 